Summary of Design Patterns for .NET Core Developers

Creational Patterns

1. Singleton
- Definition: Ensures a class has only one instance and provides a global point of access.
- Use in .NET Core: Used in services like `IConfiguration`, `ILogger`, and `DbContext` registered as Singleton in Dependency Injection.
- Example:
    
    public class SingletonService
    {
        private static SingletonService _instance;
        private static readonly object _lock = new object();

        private SingletonService() { }

        public static SingletonService Instance
        {
            get
            {
                lock (_lock)
                {
                    return _instance ??= new SingletonService();
                }
            }
        }
    }
    

2. Factory Method
- Definition: Defines an interface for creating objects but lets subclasses decide which class to instantiate.
- Use in .NET Core: Dependency Injection factories (e.g., `IServiceCollection.AddDbContext<T>()`).
- Example:
    
    public interface ILogger
    {
        void Log(string message);
    }

    public class FileLogger : ILogger
    {
        public void Log(string message) => Console.WriteLine($"File log: {message}");
    }

    public class LoggerFactory
    {
        public static ILogger CreateLogger() => new FileLogger();
    }


3. Builder
- Definition: Constructs a complex object step by step.
- Use in .NET Core: Used in configuring `IWebHostBuilder` or `IHostBuilder`.
- Example:
    
    var builder = WebApplication.CreateBuilder(args);
    builder.Services.AddControllers();
    var app = builder.Build();
    app.Run();
    

4. Prototype
- Definition: Creates new objects by copying an existing object.
- Use in .NET Core: Cloning configuration settings or objects.
- Example:

    public class Todo : ICloneable
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public object Clone() => this.MemberwiseClone();
    }
    

Structural Patterns

5. Dependency Injection (DI)  
- Definition: Injects dependencies rather than hardcoding them.
- Use in .NET Core: Core to the framework for managing services.
- Example:
    
    public class TodoService
    {
        private readonly ITodoRepository _repository;
        public TodoService(ITodoRepository repository) => _repository = repository;
    }

    // In Program.cs
    builder.Services.AddScoped<ITodoRepository, TodoRepository>();


6. Adapter
- Definition: Converts the interface of one class into another interface the client expects.
- Use in .NET Core: Using `IConfiguration` to adapt configuration providers.
- Example:
    
    public interface IMessageSender
    {
        void Send(string message);
    }

    public class EmailSender
    {
        public void SendEmail(string message) => Console.WriteLine($"Email: {message}");
    }

    public class EmailAdapter : IMessageSender
    {
        private readonly EmailSender _emailSender;
        public EmailAdapter() => _emailSender = new EmailSender();

        public void Send(string message) => _emailSender.SendEmail(message);
    }
    

7. Decorator
- Definition: Dynamically adds functionality to an object.
- Use in .NET Core: Middleware pipelines (e.g., `app.UseAuthorization()`).
- Example:
    
    public interface INotifier
    {
        void Notify(string message);
    }

    public class BasicNotifier : INotifier
    {
        public void Notify(string message) => Console.WriteLine(message);
    }

    public class SmsNotifierDecorator : INotifier
    {
        private readonly INotifier _notifier;
        public SmsNotifierDecorator(INotifier notifier) => _notifier = notifier;

        public void Notify(string message)
        {
            _notifier.Notify(message);
            Console.WriteLine($"SMS: {message}");
        }
    }


Behavioral Patterns

8. Repository
- Definition: Abstracts database logic by separating it from the business logic.
- Use in .NET Core: Typical in applications using Entity Framework.
- Example:
    
    public interface ITodoRepository
    {
        Task<IEnumerable<Todo>> GetAll();
    }

    public class TodoRepository : ITodoRepository
    {
        private readonly TodoContext _context;
        public TodoRepository(TodoContext context) => _context = context;

        public async Task<IEnumerable<Todo>> GetAll() => await _context.Todos.ToListAsync();
    }
    

9. Mediator
- Definition: Defines an object that encapsulates how objects interact.
- Use in .NET Core: Use of `MediatR` for CQRS (Command Query Responsibility Segregation).
- Example:
    
    public record GetTodoQuery(int Id) : IRequest<Todo>;

    public class GetTodoHandler : IRequestHandler<GetTodoQuery, Todo>
    {
        public async Task<Todo> Handle(GetTodoQuery request, CancellationToken cancellationToken)
        {
            // Fetch Todo from DB
            return new Todo { Id = request.Id, Name = "Sample" };
        }
    }
    

10. Observer
- Definition: Allows an object to notify other objects about changes.
- Use in .NET Core: Event handling (`IHostApplicationLifetime`).
- Example:
    
    public class EventNotifier
    {
        public event Action<string> NotifyEvent;

        public void Trigger(string message) => NotifyEvent?.Invoke(message);
    }

    public class Listener
    {
        public Listener(EventNotifier notifier)
        {
            notifier.NotifyEvent += (msg) => Console.WriteLine($"Received: {msg}");
        }
    }
    

11. Command
- Definition: Encapsulates a request as an object.
- Use in .NET Core: CQRS commands.
- Example:
    
    public interface ICommand
    {
        void Execute();
    }

    public class CreateTodoCommand : ICommand
    {
        public void Execute() => Console.WriteLine("Todo Created");
    }
    

12. Strategy
- Definition: Allows selecting an algorithm at runtime.
- Use in .NET Core: For implementing multiple payment gateways or validation rules.
- Example:
    
    public interface IPaymentStrategy
    {
        void Pay(decimal amount);
    }

    public class CreditCardPayment : IPaymentStrategy
    {
        public void Pay(decimal amount) => Console.WriteLine($"Paid {amount} by credit card");
    }
    

13. Unit of Work
- Definition: Maintains a list of operations to be committed together.
- Use in .NET Core: Works with Repository pattern to commit changes.
- Example:

    public interface IUnitOfWork
    {
        Task CommitAsync();
    }

    public class UnitOfWork : IUnitOfWork
    {
        private readonly TodoContext _context;
        public UnitOfWork(TodoContext context) => _context = context;

        public async Task CommitAsync() => await _context.SaveChangesAsync();
    }
    

This summary covers the most common patterns used in .NET Core development. Let me know if you'd like a deeper dive into any specific pattern!

